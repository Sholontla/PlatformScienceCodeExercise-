// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: store.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	StreamStore(ctx context.Context, opts ...grpc.CallOption) (StoreService_StreamStoreClient, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) StreamStore(ctx context.Context, opts ...grpc.CallOption) (StoreService_StreamStoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreService_ServiceDesc.Streams[0], "/producer.StoreService/StreamStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeServiceStreamStoreClient{stream}
	return x, nil
}

type StoreService_StreamStoreClient interface {
	Send(*StoreRequestMessage) error
	Recv() (*StoreResponseMessage, error)
	grpc.ClientStream
}

type storeServiceStreamStoreClient struct {
	grpc.ClientStream
}

func (x *storeServiceStreamStoreClient) Send(m *StoreRequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeServiceStreamStoreClient) Recv() (*StoreResponseMessage, error) {
	m := new(StoreResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility
type StoreServiceServer interface {
	StreamStore(StoreService_StreamStoreServer) error
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) StreamStore(StoreService_StreamStoreServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStore not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_StreamStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServiceServer).StreamStore(&storeServiceStreamStoreServer{stream})
}

type StoreService_StreamStoreServer interface {
	Send(*StoreResponseMessage) error
	Recv() (*StoreRequestMessage, error)
	grpc.ServerStream
}

type storeServiceStreamStoreServer struct {
	grpc.ServerStream
}

func (x *storeServiceStreamStoreServer) Send(m *StoreResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeServiceStreamStoreServer) Recv() (*StoreRequestMessage, error) {
	m := new(StoreRequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "producer.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStore",
			Handler:       _StoreService_StreamStore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "store.proto",
}
